map k,v

简单操作： 增删改查

主要有两种数据结构，哈希查找表，搜索树

哈希查找表一般会存在碰撞问题就是说不同的key被哈希到了同一个bucket
解决方法
1.链表法:将一个bucket实现成一个链表，落在同一个bucket的key都会被插入到这个链表

2.开放地址法：发生碰撞后，通过一定的规则，在数组的后面挑选“空位”，用来放置新的key。

在go里面map的结构体叫hmap（大概是hashmap的意思?）

其中有个bucket指针。最终它指向的是一个结构体 bmap。 bmap里面有一个uint8的数组。

在编译期会给这个map加料

type bmap struct
{
    topbits  [8] uint8

    keys     [8]keytype

    values   [8]valuetype

    pad      uintptr

    overflow uintptr
}
bmap就是我们常说的桶，桶里面最多会装8个key，这些key之所以会落入一个桶是因为他们经过哈希计算后，哈希结果是"一类"的。在桶内，又会根据key计算出来的hash值的高8位来决定key到底落入桶内的那个位置（一个桶内最多有8个位置）。

新桶扩容的大小是旧桶的两倍

当map的key和value都不是指针，并且size都小于128字节的情况下，会把bmap标记为不含指针，这样可以避免gc时扫描整个hmap。但是，我们看bmap其实有一个overflow的字段，是指针类型的。破坏了bmap不含指针的设想，这时会把overflow移动到extra字段来。

bucket 里面最多能存储8对key value,key和value是分别放在一起的。为了节省内存空间。w











